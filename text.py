def tool_description() -> str:
    return """
    This tool allows you to upload MATLAB `.mat` files containing `oo_` and `M_` data to visualize impulse response functions (IRFs). It helps in selecting variables and shocks for plotting and provides options to customize and download the plots. MATLAB is a numerical computing environment widely used for simulations ([Learn more](https://www.mathworks.com/products/matlab.html)). Dynare is a software platform for economic models ([Learn more](https://www.dynare.org/)).
    """  # noqa: E501


def instructions() -> str:
    return """
    ### Instructions:
    1. Upload a `.mat` file containing `oo_` and `M_` data.
    2. Ensure that `oo_` includes the impulse response functions (IRFs).
    3. Select endogenous variables and shocks to plot the IRFs.

    #### Example for saving in MATLAB:
    ```matlab
    dynare('example_model.mod')
    save('example_results', 'oo_', 'M_')
    ```

    #### Note on display names:
    If `long_name` is defined in the `.mod` file, it will be used as the display name for IRFs. For more details on `long_name`, refer to the [Dynare Manual - Variable Declarations](https://archives.dynare.org/manual/Variable-declarations.html).
    ```matlab
    var c $C$ (long_name='Consumption');
    ```
    1. Upload a `.mat` file containing `oo_` and `M_` data.
    2. Select the variables and shocks you want to visualize.
    3. Customize the plot settings as needed.
    4. Click "Generate Plot" to view the impulse response functions.
    5. Use the "Download Plot" button to save the figure.
    """  # noqa: E501


def about_sample() -> str:
    return """
    ### About the sample.mat File

    The `sample.mat` file is generated by running the following `.mod` file with Dynare 4.6.3:

    - **Download Link**: [sample.mat](https://github.com/mitsuhir0/dynare-irf-plotter/blob/master/sample.mat)

    - **MOD File**: [Gali_2015_chapter_5_commitment.mod](https://github.com/JohannesPfeifer/DSGE_mod/blob/master/Gali_2015/Gali_2015_chapter_5_commitment.mod)
    - **Source Repository**: [Johannes Pfeifer's DSGE Mod Repository](https://github.com/JohannesPfeifer)

    This `.mod` file examines the optimal monetary policy under commitment in the New Keynesian framework, as described in Chapter 5 of Gali (2015).

    #### How to Generate the File
    1. Clone the repository from [Johannes Pfeifer's GitHub](https://github.com/JohannesPfeifer).
    2. Navigate to the `Gali_2015` folder.
    3. Run the `.mod` file using Dynare 4.6.3 or later:
        ```bash
        dynare Gali_2015_chapter_5_commitment.mod
        ```
    4. Save the results as `sample.mat`
        ```matlab
        save('sample.mat', 'oo_', 'M_')
        ```

    #### Reference
    - Gali, J. (2015). *Monetary Policy, Inflation, and the Business Cycle: An Introduction to the New Keynesian Framework and Its Applications* (2nd ed.). Princeton University Press.
    """  # noqa: E501


def about_pkl() -> str:
    return """
    ### About the PKL File
    The PKL file contains the following information:

    - **figure**: The Matplotlib `Figure` object.
    - **matplotlib_version**: The version of Matplotlib used to create the figure.
    - **pickle_protocol**: The Pickle protocol version used for serialization.

    #### How to Load the PKL File

    You can load the saved PKL file and reuse the figure in Python using the following code:

    ```python
    import pickle
    import matplotlib.pyplot as plt

    # Load the PKL file
    with open('saved_figure.pkl', 'rb') as f:
        data = pickle.load(f)

    fig = data['figure']

    # Get all axes from the figure
    axes = fig.get_axes()

    # Modify all axes
    for ax in axes:
        lines = ax.get_lines()  # Get all lines in the axis
        if lines:  # Check if there are any lines
            line = lines[0]  # Select the first line
            line.set_linestyle('--')  # Set the line style to dashed
            line.set_marker('o')     # Add circle markers

    # Display the modified figure
    plt.show()
    """  # noqa: E501


def desclaimer() -> str:
    return """
    ### Disclaimer

    This tool is provided "as is" without any guarantees of accuracy. The authors and contributors are not responsible for any errors, omissions, or outcomes resulting from the use of this tool. Use it at your own risk.
    """  # noqa: E501


def copyright() -> str:
    return """
    Copyright (c) 2025 [mitsuhir0](https://github.com/mitsuhir0). All rights reserved.
    """
